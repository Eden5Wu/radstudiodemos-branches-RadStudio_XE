unit DBXUtilsTests;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, DB, DBXTypedTableStorage, DBXUtils, SqlExpr, Classes, DBXCommonTable,
  SysUtils, DBXCommon, DBXMetaDataReader, DBXMetaDataWriter,
  DBXMetaDataProvider, DBClient;

type
  // Test methods for class TDBXIntObj

  TDBXUtilsTests = class(TTestCase)
  private
    FConnection: TSQLConnection;
    FDateValue: TDateTime;
    FBlobValue: TBytes;
    procedure PopulateTestTable;
    procedure VerifyDates(const AExpected, AActual: TDateTime);
    procedure VerifyBytes(const AExpected, AActual: TBytes);
    procedure VerifyParam(AParam: TParam; const AExpectedName: string;
      const AExpectedDataType: TFieldType; AExpectedValue: Variant;
      AExpectedParamType: TParamType; AExpectedSize: Integer);
    procedure VerifyCDS(ADataSet: TClientDataSet; AIsEmpty: Boolean);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure CreateConnectionNameTest;
    procedure CreateConnectionPropsTest;
    procedure GetValueTest;
    procedure GetCountTest;
    procedure GetValueNullDefaultTest;
    procedure GetBytesTest;
    procedure GetMemoTest;
    procedure MakeParamTest;
    procedure MakeParamListTest;
    procedure ExecNoQueryTest;
    procedure ExecProcTest;
    procedure CreateDataSetTest;
    procedure GetDataSetTest;
    procedure GetClientDataSetTest;
    procedure DataSetToCDSTest;
  end;

implementation

uses
  DbxInterbase;

const
  cnTestConnection = 'DBUtilsTest';
  cnStringValue = 'Test';
  cnDecimalValue = 1.23456;
  cnDoubleValue = 1.5;
  cnSingleValue = 0.75;
  cnInt32Value = 42;
  cnInt64Value = MaxLongInt;
  cnMemoValue = 'MemoTest';

procedure TDBXUtilsTests.CreateConnectionNameTest;
var
  lConnection: TSQLConnection;
begin
  lConnection := CreateConnectionName(cnTestConnection);
  try
    CheckNotNull(lConnection);
    CheckTrue(lConnection.ConnectionState = csStateOpen);
    CheckEqualsString(cnTestConnection, lConnection.ConnectionName);
  finally
    lConnection.Close;
    lConnection.Free;
  end;
end;

procedure TDBXUtilsTests.VerifyBytes(const AExpected, AActual: TBytes);
var
  i: Integer;
begin
  CheckEquals(Length(AExpected), Length(AActual), 'Length');
  for i := Low(AExpected) to High(AExpected) do
    CheckEquals(AExpected[i], AActual[i], Format('Byte %d', [i]));
end;

procedure TDBXUtilsTests.VerifyDates(const AExpected, AActual: TDateTime);
var
  ExpYear, ExpMonth, ExpDay, ExpHour, ExpMin, ExpSec, ExpMsec: Word;
  ActYear, ActMonth, ActDay, ActHour, ActMin, ActSec, ActMsec: Word;
begin
  DecodeDate(AExpected, ExpYear, ExpMonth, ExpDay);
  DecodeTime(AExpected, ExpHour, ExpMin, ExpSec, ExpMsec);
  DecodeDate(AActual, ActYear, ActMonth, ActDay);
  DecodeTime(AActual, ActHour, ActMin, ActSec, ActMsec);

  CheckEquals(ExpYear, ActYear, 'Year');
  CheckEquals(ExpMonth, ActMonth, 'Month');
  CheckEquals(ExpDay, ActDay, 'Day');
  CheckEquals(ExpHour, ActHour, 'Hour');
  CheckEquals(ExpMin, ActMin, 'Min');
  CheckEquals(ExpSec, ActSec, 'Sec');
end;

procedure TDBXUtilsTests.CreateConnectionPropsTest;
const
  cnUserName = 'sysdba';
  cnPassword = 'masterkey';
  cnDataBase = 'localhost:d:\radstudiodemos\branches\RadStudio_XE\Delphi\Database\dbExpress\Utils\Tests\Data\dbutilstest.ib';
var
  lDatabase: string;
  lCon: TSQLConnection;
begin
  lCon := CreateConnectionProps(cnDatabase, cnUserName, cnPassword);
  try
    CheckNotNull(lCon);
    CheckTrue(lCon.ConnectionState = csStateOpen);
    lCon.Close;
  finally
    lCon.Free;
  end;
end;

procedure TDBXUtilsTests.CreateDataSetTest;
var
  lRetVal: TSQLDataSet;

  procedure VerifyDataSet(const AExpectedSQL: string; AExpectedType: TSQLCommandType);
  begin
    CheckNotNull(lRetVal);
    CheckEqualsString(AExpectedSQL, lRetVal.CommandText);
    CheckTrue(AExpectedType = lRetVal.CommandType);
    CheckTrue(lRetVal.State = dsInactive);
  end;

begin
  lRetVal := CreateDataSet(FConnection, 'select foo from bar');
  try
    VerifyDataSet('select foo from bar', ctQuery);
  finally
    lRetVal.Free;
  end;

  lRetVal := CreateDataSet(FConnection, 'some_proc', ctStoredProc);
  try
    VerifyDataSet('some_proc', ctStoredProc);
  finally
    lRetVal.Free;
  end;
end;

procedure TDBXUtilsTests.DataSetToCDSTest;
var
  lDataSet: TSQLDataSet;
  lCDS: TClientDataSet;
  lField: TField;
begin
  lDataSet := GetDataSet(FConnection, 'select int32_field, int64_field from test_table');
  try
    lCDS := DataSetToCDS(lDataSet);
    try
      CheckNotNull(lCDS);
      CheckEquals(lDataSet.RecordCount, lCDS.RecordCount);
      CheckEquals(lDataSet.FieldCount, lCDS.FieldCount);
      for lField in lDataSet.Fields do
        CheckEquals(lField.AsLargeInt, lCDS.FieldByName(lField.FieldName).AsLargeInt);
    finally
      lCDS.Free;
    end;
  finally
    lDataSet.Free;
  end;
end;

procedure TDBXUtilsTests.ExecNoQueryTest;
var
  lVal: Integer;
  lParams: TParams;
begin
  lVal := GetValue(FConnection, 'int32_field', 'test_table', -1);
  CheckEquals(cnInt32Value, lVal);

  CheckEquals(ExecNoQuery(FConnection, Format('update test_table set int32_field = %d', [cnInt32Value * 2])), 1);
  lVal := GetValue(FConnection, 'int32_field', 'test_table', -1);
  CheckEquals(cnInt32Value * 2, lVal);

  lParams := MakeParamList('val', ftInteger, cnInt32Value * 4);
  CheckEquals(ExecNoQuery(FConnection, 'update test_table set int32_field = :val',
    lParams, False), 1);
  lVal := GetValue(FConnection, 'int32_field', 'test_table', -1);
  CheckEquals(cnInt32Value * 4, lVal);
  CheckEquals(ExecNoQuery(FConnection,
    'update test_table set int32_field = int32_field - :val', lParams, True), 1);
  lVal := GetValue(FConnection, 'int32_field', 'test_table', -1);
  CheckEquals(0, lVal);
end;

procedure TDBXUtilsTests.ExecProcTest;
var
  lParams: TParams;
  lRetVal: Double;
begin
  ExecProc(FConnection, 'TEST_PROC');
  ExecProc(FConnection, 'TEST_PROC_WITH_PARAM', MakeParamList('PARAM', ftInteger, cnInt32Value));

  lParams := MakeParamList(
    [MakeParam('PARAM', ftInteger, cnInt32Value),
     MakeParam('RETURN_VALUE', ftBCD, 0, ptOutput)]);
  lRetVal := ExecProc(FConnection, 'TEST_PROC_WITH_RETURN_VALUE', lParams, False);
  CheckEquals(cnInt32Value * 2, lRetVal);
end;

procedure TDBXUtilsTests.GetBytesTest;
var
  lRetVal: TBytes;
  lExpected: TBytes;
  i: Integer;
  lParams: TParams;
begin
  SetLength(lExpected, 3);
  for i := Low(lExpected) to High(lExpected) do
    lExpected[i] := i;

  lRetVal := GetBytes(FConnection, 'blob_field', 'test_table', nil);
  VerifyBytes(FBlobValue, lRetVal);
  lRetVal := GetBytes(FConnection, 'blob_field', 'test_table', lExpected, '0 = 1');
  VerifyBytes(lExpected, lRetVal);

  lParams := MakeParamList('val', ftInteger, 0);
  lRetVal := GetBytes(FConnection, 'blob_field', 'test_table', nil, '0 = :val',
    lParams, False);
  VerifyBytes(FBlobValue, lRetVal);
  lRetVal := GetBytes(FConnection, 'blob_field', 'test_table', nil, '0 = :val',
    lParams, True);
  VerifyBytes(FBlobValue, lRetVal);
end;

procedure TDBXUtilsTests.VerifyCDS(ADataSet: TClientDataSet; AIsEmpty: Boolean);
begin
  CheckNotNull(ADataSet);
  CheckEquals(2, ADataSet.FieldCount);
  CheckTrue(ADataSet.State = dsBrowse);
  if AIsEmpty then
    CheckEquals(0, ADataSet.RecordCount)
  else
  begin
    CheckEquals(1, ADataSet.RecordCount);
    CheckEquals(cnInt32Value, ADataSet.FieldByName('int32_field').AsInteger);
    CheckEquals(cnInt64Value, ADataSet.FieldByName('int64_field').AsLargeInt);
    ADataSet.Next;
    CheckTrue(ADataSet.Eof);
  end;
end;

procedure TDBXUtilsTests.GetClientDataSetTest;
var
  lRetVal: TClientDataSet;
  lParams: TParams;
begin
  lRetVal := GetClientDataSet(FConnection,
    'select int32_field, int64_field from test_table');
  try
    VerifyCDS(lRetVal, False);
  finally
    lRetVal.Free;
  end;

  lParams := MakeParamList('int32_field', ftInteger, cnInt32Value);
  lRetVal := GetClientDataSet(FConnection, 'select int32_field, int64_field from test_table where int32_field = :int32_field', lParams, False);
  try
    VerifyCDS(lRetVal, False);
  finally
    lRetVal.Free;
  end;

  lParams[0].Value := cnInt32Value + 1;
  lRetVal := GetClientDataSet(FConnection, 'select int32_field, int64_field from test_table where int32_field = :val', lParams, True);
  try
    VerifyCDS(lRetVal, True);
  finally
    lRetVal.Free;
  end;

  lRetVal := GetClientDataSet(FConnection, 'int32_field, int64_field', 'test_table');
  try
    VerifyCDS(lRetVal, False);
  finally
    lRetVal.Free;
  end;

  lParams := MakeParamList('val', ftInteger, cnInt32Value);
  lRetVal := GetClientDataSet(FConnection, 'int32_field, int64_field', 'test_table', 'int32_field = :val', lParams, False);
  try
    VerifyCDS(lRetVal, False);
  finally
    lRetVal.Free;
  end;

  lParams[0].Value := cnInt32Value + 1;
  lRetVal := GetClientDataSet(FConnection, 'int32_field, int64_field', 'test_table', 'int32_field = :val', lParams, True);
  try
    VerifyCDS(lRetVal, True);
  finally
    lRetVal.Free;
  end;
end;

procedure TDBXUtilsTests.GetCountTest;
begin
  CheckEquals(1, GetCount(FConnection, 'test_table',
    'string_field = :string_field',
      MakeParamList('string_field', ftString, cnStringValue)));
  CheckEquals(0, GetCount(FConnection, 'test_table',
    'string_field = :string_field',
      MakeParamList('string_field', ftString, cnStringValue + 'foo')));
end;

procedure TDBXUtilsTests.GetDataSetTest;
var
  lRetVal: TSQLDataSet;
  lParams: TParams;

  procedure VerifyDataSet(AIsEmpty: Boolean);
  begin
    CheckNotNull(lRetVal);
    CheckEquals(2, lRetVal.FieldCount);
    CheckTrue(lRetVal.State = dsBrowse);
    if AIsEmpty then
      CheckTrue(lRetVal.Bof and lRetVal.Eof)
    else
    begin
      //Gives an 'Operation Not Supported' exception for parameterized queries
      //CheckEquals(1, lRetVal.RecordCount);
      CheckFalse(lRetVal.Eof);
      CheckEquals(cnInt32Value, lRetVal.FieldByName('int32_field').AsInteger);
      CheckEquals(cnInt64Value, lRetVal.FieldByName('int64_field').AsLargeInt);
      lRetVal.Next;
      CheckTrue(lRetVal.Eof);
    end;
  end;

begin
  lRetVal := GetDataSet(FConnection, 'select int32_field, int64_field from test_table');
  try
    VerifyDataSet(False);
  finally
    lRetVal.Free;
  end;

  lParams := MakeParamList('int32_field', ftInteger, cnInt32Value);
  lRetVal := GetDataSet(FConnection, 'select int32_field, int64_field from test_table where int32_field = :int32_field', lParams, False);
  try
    VerifyDataSet(False);
  finally
    lRetVal.Free;
  end;

  lParams[0].Value := cnInt32Value + 1;
  lRetVal := GetDataSet(FConnection, 'select int32_field, int64_field from test_table where int32_field = :val', lParams, True);
  try
    VerifyDataSet(True);
  finally
    lRetVal.Free;
  end;

  lRetVal := GetDataSet(FConnection, 'int32_field, int64_field', 'test_table');
  try
    VerifyDataSet(False);
  finally
    lRetVal.Free;
  end;

  lParams := MakeParamList('val', ftInteger, cnInt32Value);
  lRetVal := GetDataSet(FConnection, 'int32_field, int64_field', 'test_table', 'int32_field = :val', lParams, False);
  try
    VerifyDataSet(False);
  finally
    lRetVal.Free;
  end;

  lParams[0].Value := cnInt32Value + 1;
  lRetVal := GetDataSet(FConnection, 'int32_field, int64_field', 'test_table', 'int32_field = :val', lParams, True);
  try
    VerifyDataSet(True);
  finally
    lRetVal.Free;
  end;
end;

procedure TDBXUtilsTests.GetMemoTest;
var
  lRetVal: string;
  lParams: TParams;
begin
  lRetVal := GetMemo(FConnection, 'memo_field', 'test_table', 'oops');
  CheckEquals(cnMemoValue, lRetVal);
  lRetVal := GetValue(FConnection, 'memo_field', 'test_table', 'oops', '0 = 1');
  CheckEquals('oops', lRetVal);

  lParams := MakeParamList('val', ftInteger, 0);
  lRetVal := GetMemo(FConnection, 'memo_field', 'test_table', 'oops', '0 = :val',
    lParams, False);
  CheckEquals(cnMemoValue, lRetVal);
  lRetVal := GetMemo(FConnection, 'memo_field', 'test_table', 'oops', '0 = :val',
    lParams, True);
  CheckEquals(cnMemoValue, lRetVal);
end;

procedure TDBXUtilsTests.GetValueNullDefaultTest;
var
  lInt64: Int64;
  lInt32: Integer;
  lDouble: Double;
  lDate: TDateTime;
  lStr: string;
  lParams: TParams;
begin
  lStr := GetValueNullDefault(FConnection, 'string_field', 'test_table', 'oops', 'oopsnull');
  CheckEquals(cnStringValue, lStr);
  lStr := GetValueNullDefault(FConnection, 'string_field', 'test_table', 'oops', 'oopsnull', '0 = 1');
  CheckEquals('oops', lStr);
  lStr := GetValueNullDefault(FConnection, 'null asstring_field', 'test_table', 'oops', 'oopsnull');
  CheckEquals('oopsnull', lStr);

  lInt32 := GetValueNullDefault(FConnection, 'int32_field', 'test_table', -1, 0);
  CheckEquals(cnInt32Value, lInt32);
  lInt32 := GetValueNullDefault(FConnection, 'int32_field', 'test_table', -1, 0, '0 = 1');
  CheckEquals(-1, lInt32);
  lInt32 := GetValueNullDefault(FConnection, 'null as int32_field', 'test_table', -1, 0);
  CheckEquals(0, lInt32);

  lDouble := GetValueNullDefault(FConnection, 'double_field', 'test_table', -1, 0);
  CheckEquals(cnDoubleValue, lDouble);
  lDouble := GetValueNullDefault(FConnection, 'double_field', 'test_table', -1, 0, '0 = 1');
  CheckEquals(-1, lDouble);
  lDouble := GetValueNullDefault(FConnection, 'null as double_field', 'test_table', -1, 0);
  CheckEquals(0, lDouble);

  lDate := GetValueNullDefault(FConnection, 'date_field', 'test_table', 0, 1);
  VerifyDates(FDateValue, lDate);
  lDate := GetValueNullDefault(FConnection, 'date_field', 'test_table', 0, 1, '0 = 1');
  CheckEquals(0, lDate);
  lDate := GetValueNullDefault(FConnection, 'null as date_field', 'test_table', 0, 1);
  CheckEquals(1, lDate);

  lInt64 := GetValueNullDefault(FConnection, 'int64_field', 'test_table', -1, 0);
  CheckEquals(cnInt64Value, lInt64);
  lInt64 := GetValueNullDefault(FConnection, 'int64_field', 'test_table', -1, 0, '0 = 1');
  CheckEquals(-1, lInt64);
  lInt64 := GetValueNullDefault(FConnection, 'null as int64_field', 'test_table', -1, 0);
  CheckEquals(0, lInt64);

  lParams := MakeParamList('val', ftLargeint, cnInt64Value);
  lInt64 := GetValueNullDefault(FConnection, 'int64_field', 'test_table', -1, 0,
    'int64_field = :val', lParams, False);
  CheckEquals(cnInt64Value, lInt64);
  lParams[0].Value := cnInt64Value + 1;
  lInt64 := GetValueNullDefault(FConnection, 'null as nt64_field', 'test_table', -1, 0,
    'int64_field = :val', lParams, False);
  CheckEquals(-1, lInt64);
  lParams[0].Value := cnInt64Value;
  lInt64 := GetValueNullDefault(FConnection, 'null as nt64_field', 'test_table', -1, 0,
    'int64_field = :val', lParams, False);
  CheckEquals(0, lInt64);
  lInt64 := GetValueNullDefault(FConnection, 'int64_field', 'test_table', -1, 0,
    'int64_field = :val', lParams, True);
  CheckEquals(cnInt64Value, lInt64);
end;

procedure TDBXUtilsTests.GetValueTest;
var
  lInt64: Int64;
  lInt32: Integer;
  lDouble: Double;
  lDate: TDateTime;
  lStr: string;
  lParams: TParams;
begin
  lStr := GetValue(FConnection, 'string_field', 'test_table', 'oops');
  CheckEquals(cnStringValue, lStr);
  lStr := GetValue(FConnection, 'string_field', 'test_table', 'oops', '0 = 1');
  CheckEquals('oops', lStr);

  lInt32 := GetValue(FConnection, 'int32_field', 'test_table', -1);
  CheckEquals(cnInt32Value, lInt32);
  lInt32 := GetValue(FConnection, 'int32_field', 'test_table', -1, '0 = 1');
  CheckEquals(-1, lInt32);

  lDouble := GetValue(FConnection, 'double_field', 'test_table', -1);
  CheckEquals(cnDoubleValue, lDouble);
  lDouble := GetValue(FConnection, 'double_field', 'test_table', -1, '0 = 1');
  CheckEquals(-1, lDouble);

  lDate := GetValue(FConnection, 'date_field', 'test_table', 0);
  VerifyDates(FDateValue, lDate);
  lDate := GetValue(FConnection, 'date_field', 'test_table', 0, '0 = 1');
  CheckEquals(0, lDate);

  lInt64 := GetValue(FConnection, 'int64_field', 'test_table', -1);
  CheckEquals(cnInt64Value, lInt64);
  lInt64 := GetValue(FConnection, 'int64_field', 'test_table', -1, '0 = 1');
  CheckEquals(-1, lInt64);

  lParams := MakeParamList('val', ftLargeint, cnInt64Value);
  lInt64 := GetValue(FConnection, 'int64_field', 'test_table', -1,
    'int64_field = :val', lParams, False);
  CheckEquals(cnInt64Value, lInt64);
  lInt64 := GetValue(FConnection, 'int64_field', 'test_table', -1,
    'int64_field = :val', lParams, True);
  CheckEquals(cnInt64Value, lInt64);

  lInt32 := GetValue(FConnection, 'null as int32_field', 'test_table', -1);
  CheckEquals(-1, lInt32);
end;

procedure TDBXUtilsTests.VerifyParam(AParam: TParam; const AExpectedName: string;
  const AExpectedDataType: TFieldType; AExpectedValue: Variant;
  AExpectedParamType: TParamType; AExpectedSize: Integer);
begin
  CheckNotNull(AParam);
  CheckEqualsString(AExpectedName, AParam.Name, 'AParam.Name');
  CheckTrue(AExpectedDataType = AParam.DataType, 'AParam.DataType');
  CheckTrue(AExpectedValue = AParam.Value, 'AParam.Value');
  CheckTrue(AExpectedParamType = AParam.ParamType, 'AParam.ParamType');
  CheckEquals(AExpectedSize, AParam.Size, 'AParam.Size');
end;

procedure TDBXUtilsTests.MakeParamTest;
var
  lParam: TParam;
begin
  lParam := MakeParam('IntParam', ftInteger, 1);
  try
    VerifyParam(lParam, 'IntParam', ftInteger, 1, ptInput, 0);
  finally
    lParam.Free;
  end;

  lParam := MakeParam('FloatParam', ftFloat, 2.5, ptOutput);
  try
    VerifyParam(lParam, 'FloatParam', ftFloat, 2.5, ptOutput, 0);
  finally
    lParam.Free;
  end;

  lParam := MakeParam('StringParam', ftString, 'ParamVal', ptInputOutput, 10);
  try
    VerifyParam(lParam, 'StringParam', ftString, 'ParamVal', ptInputOutput, 10);
  finally
    lParam.Free;
  end;

  lParam := MakeParam('LongStringParam', ftString, 'ParamVal', ptInput, 3);
  try
    VerifyParam(lParam, 'LongStringParam', ftString, 'Par', ptInput, 3);
  finally
    lParam.Free;
  end;
end;


procedure TDBXUtilsTests.MakeParamListTest;
var
  lParams: TParams;
begin
  lParams := MakeParamList('IntParam', ftInteger, 1);
  try
    VerifyParam(lParams[0], 'IntParam', ftInteger, 1, ptInput, 0);
  finally
    lParams.Free;
  end;

  lParams := MakeParamList('FloatParam', ftFloat, 2.5, ptOutput);
  try
    VerifyParam(lParams[0], 'FloatParam', ftFloat, 2.5, ptOutput, 0);
  finally
    lParams.Free;
  end;

  lParams := MakeParamList('StringParam', ftString, 'ParamVal', ptInputOutput, 10);
  try
    VerifyParam(lParams[0], 'StringParam', ftString, 'ParamVal', ptInputOutput, 10);
  finally
    lParams.Free;
  end;

  lParams := MakeParamList('LongStringParam', ftString, 'ParamVal', ptInput, 3);
  try
    VerifyParam(lParams[0], 'LongStringParam', ftString, 'Par', ptInput, 3);
  finally
    lParams.Free;
  end;
end;


procedure TDBXUtilsTests.PopulateTestTable;
const
  cnInsertSQL =
    'insert into test_table(string_field, int32_field, double_field, date_field, ' +
    'memo_field, decimal_field, int64_field, blob_field, single_field) ' +
    'values (:string_field, :int32_field, :double_field, :date_field, ' +
    ':memo_field, :decimal_field, :int64_field, :blob_field, :single_field)';
  cnBlobLength = ($FFFF * 2) + 5;
var
  lDataSet: TSQLDataSet;
  i: Integer;
begin
  FDateValue := Now;
  SetLength(FBlobValue, cnBlobLength);
  for i := 0 to Pred(cnBlobLength) do
    FBlobValue[i] := i;

  lDataSet := CreateDataSet(FConnection, cnInsertSQL);
  lDataSet.ParamByName('string_field').AsString := cnStringValue;
  lDataSet.ParamByName('int32_field').AsInteger := cnInt32Value;
  lDataSet.ParamByName('double_field').AsFloat := cnDoubleValue;
  lDataSet.ParamByName('date_field').AsDateTime := FDateValue;
  lDataSet.ParamByName('memo_field').AsMemo := cnMemoValue;
  lDataSet.ParamByName('decimal_field').AsFloat := cnDecimalValue;
  lDataSet.ParamByName('int64_field').AsLargeInt := cnInt64Value;
  lDataSet.ParamByName('blob_field').AsBlob := FBlobValue;
  lDataSet.ParamByName('single_field').AsSingle := cnSingleValue;
  lDataSet.ExecSQL;
end;

procedure TDBXUtilsTests.SetUp;
begin
  FConnection := CreateConnectionName(cnTestConnection);
  PopulateTestTable;
end;

procedure TDBXUtilsTests.TearDown;
begin
  if Assigned(FConnection) then
  begin
    ExecNoQuery(FConnection, 'delete from test_table');
    if FConnection.ConnectionState = csStateOpen then
      FConnection.Close;
    FConnection.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TDBXUtilsTests.Suite);
end.

